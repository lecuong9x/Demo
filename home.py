import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("Agg")
import streamlit.components.v1 as stc
import seaborn as sns
import plotly.express as px
import numpy as np
#load ML
import joblib
import os


# ƒë∆∞·ªùng link d·ªØ li·ªáu
# https://github.com/ASR373/diabetes-risk-prediction-app

# Contents of ~/my_app/streamlit_app.py
html_temp = """
        <div style="background-color:#3872fb; padding:10px;border-radius:10px;">
         <h1 style ="color:white; text-align:center;">·ª®ng d·ª•ng d·ªØ li·ªáu </h1>  
         <h4 style ="color:white; text-align:center;">B·ªánh ti·ªÉu ƒë∆∞·ªùng </h4> 
        </div>
            """

desc_temp = """
            ### ·ª®ng d·ª•ng d·ª± ƒëo√°n b·ªánh ti·ªÉu ƒë∆∞·ªùng
            D·ªØ li·ªáu ch·ª©a c√°c d·∫•u hi·ªáu v√† c·∫£nh b√°o s·ªõm v·ªÅ ng∆∞·ªùi m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng
            ### N·ªôi dung c·ªßa ·ª©ng d·ª•ng
                - ƒê·ªçc d·ªØ li·ªáu: Ph√¢n t√≠ch d·ªØ li·ªáu
                - M√¥ h√¨nh h√≥a: ·ª®ng d·ª•ng m√¥ h√¨nh h√≥a d·ª± ƒëo√°n
            """

#<h4 style ="color:white, text-align:center;">B·ªánh ti·ªÉu ƒë∆∞·ªùng </h4>
def main(): # trang ch√≠nh
    #st.markdown("# Main APP üéà")
    stc.html(html_temp)
    st.markdown(desc_temp, unsafe_allow_html=True)
def contract(): # trang ƒë·ªçc d·ªØ li·ªáu
    stc.html(html_temp)
    st.markdown("# Page 2 ‚ùÑÔ∏è")
    #st.sidebar.markdown("# Page 2 ‚ùÑÔ∏è")
    def load_data(data):
        df = pd.read_csv(data)
        return df

    st.header("Kh√°m ph√° d·ªØ li·ªáu")
    df = pd.read_csv("https://raw.githubusercontent.com/ASR373/diabetes-risk-prediction-app/master/diabetes_data_upload.csv")
    #df= load_data("https://raw.githubusercontent.com/ASR373/diabetes-risk-prediction-app/master/diabetes_data_upload.csv")
    #df= load_data("D:\Cuong_DA\Diabetes_dataset.xlsx")
    freq_df = pd.read_csv("https://raw.githubusercontent.com/ASR373/diabetes-risk-prediction-app/master/freqdist_of_age_data.csv")
    df_encoded = load_data("https://raw.githubusercontent.com/ASR373/diabetes-risk-prediction-app/master/diabetes_data_upload_clean.csv")
    submenu = st.sidebar.selectbox("Trang ph·ª•", ["Di·ªÖn gi·∫£i", "Plots"])
    if submenu == "Di·ªÖn gi·∫£i":
        st.dataframe(df)

        with st.expander("Lo·∫°i d·ªØ li·ªáu"):
            st.dataframe(df.dtypes)
        
        with st.expander("Di·ªÖn gi·∫£i d·ªØ li·ªáu"):
            st.dataframe(df.describe())

        with st.expander("Ph√¢n b·ªï s·ªë l∆∞·ªùng tr∆∞·ªùng ƒë√°nh gi√° (Class)"):
            st.dataframe(df["class"].value_counts())

        with st.expander("Ph√¢n b·ªï s·ªë l∆∞·ªùng gi·ªõi t√≠nh(Gender)"):
            st.dataframe(df["Gender"].value_counts())

        with st.expander("C√°c tr∆∞·ªùng tr·ªëng"):
            st.dataframe(df.isnull().sum())

    elif submenu == "Plots":
        st.subheader("Bi·ªÉu ƒë·ªì")

        col1, col2 = st.columns([2,1])

        with col1:
            with st.expander("Bi·ªÉu ƒë·ªì PLKH theo gi·ªõi t√≠nh"): 
                
                gen_df  = df['Gender'].value_counts()
                gen_df = gen_df.reset_index()
                gen_df.columns = ["Gender Type", "Counts"]
                
                pl = px.pie(gen_df, names = "Gender Type",values = "Counts")
                st.plotly_chart(pl,use_container_width=True)
                
            with st.expander("Bi·ªÉu ƒë·ªì theo PPLKH"):
                class_count  = df['class'].value_counts()
                
        #fig = plt.figure(figsize=(10,5))
                chartdata = pd.DataFrame(class_count)
                st.bar_chart(chartdata)

                
        with col2:
            with st.expander("PLKH theo gi·ªõi t√≠nh"):
                st.dataframe(gen_df)

            with st.expander("PLKH theo H·∫°ng kh√°ch h√†ng"):
                st.dataframe(class_count)
        
        with st.expander("Ph√¢n ph·ªëi c·ªßa ƒë·ªô tu·ªïi"):
            #st.write(freq_df)    
            p2= px.bar(freq_df,x="s", y="count")
            st.plotly_chart(p2)

        with st.expander("Bi·ªÉu ƒë·ªì ngo·∫°i vi"):
            fig = plt.figure()
            #sns.boxenplot(df["Age"])
            sns.boxplot(df["Age"])
            st.pyplot(fig)

            p3=px.box(df,x = "Age",color="Gender")
            st.plotly_chart(p3)

        # correlation
        with st.expander("Bi·ªÉu ƒë·ªì t∆∞∆°ng quan"):
            corr_matrix = df_encoded.corr()
            fig = plt.figure(figsize=(20,10))
            sns.heatmap(corr_matrix,annot = True)
            st.pyplot(fig)

        # C√°ch kh√°c v·∫Ω corr
        p4 = px.imshow(corr_matrix)
        st.plotly_chart(p4)


def about(): # trang m√¥ h√¨nh h√≥a
    #st.markdown("# Page 3 üéâ")
    #st.sidebar.markdown("# Page 3 üéâ")
    attrib_info = """
    - Age 1.20-65.
    - Sex: 1. Male, 2.Female.
    - Polyuria: 1.Yes, 2.No.
    - Polydipsia: 1.Yes, 2.No.
    - Sudden weight loss: 1.Yes, 2.No.
    - Weakness: 1.Yes, 2.No.
    - Polyphagia: 1.Yes, 2.No.
    - Genital thrush: 1.Yes, 2.No.
    - Visual blurring: 1.Yes, 2.No.
    - Itching: 1.Yes, 2.No.
    - Irritability: 1.Yes, 2.No.
    - Delayed healing: 1.Yes, 2.No.
    - Partial paresis: 1.Yes, 2.No.
    - Muscle stiffness: 1.Yes, 2.No.
    - Alopecia: 1.Yes, 2.No.
    - Obesity: 1.Yes, 2.No.
    - Class: 1.Positive, 2.Negative.
    """
    label_dict = {"No":0,"Yes":1}
    gender_map =  {"Female":0,"Male":1}
    target_label_map = {"Negative":0,"Positive":1}

    def get_fvalue(val):
        feature_dict = {"No":0,"Yes":1}
        for key,value in feature_dict.items():
            if val == key:
                return value
    
    def get_value(val,my_dict):
        for key,value in my_dict.items():
            if val == key:
                return value

    #Load ML model
    @st.cache
    def load_model(model_file):
        loaded_model = joblib.load(open(os.path.join(model_file),"rb"))
        return loaded_model
    
    def run_ml_app():
        st.subheader("ML Prediction")

        with st.expander("Th√¥ng tin thu·ªôc t√≠nh"):
            st.markdown(attrib_info)

    #layout
    col1, col2 = st.columns(2)

    with col1:
        age = st.number_input("Age",10,100)# t·∫°o 1 range tu·ªïi t·ª´ 10 ƒë·∫øn 100
        gender = st.radio("Gender",("Male","Female"))
        polyuria = st.radio("Polyuria",["No","Yes"])
        polydipsia = st.radio("Polydipsia",["No","Yes"])
        sudden_weight_loss =  st.radio("Sudden_weight_loss",["No","Yes"])
        weakness = st.radio("Weakness",["No","Yes"])
        polyphagia = st.radio("polyphagia",["No","Yes"])
        genital_thrush = st.radio("Genital_thrush",["No","Yes"])
    
    with col2:
        visual_blurring = st.selectbox("Visual_blurring",["No","Yes"])
        itching = st.radio("itching",["No","Yes"]) 
        irritability = st.radio("irritability",["No","Yes"]) 
        delayed_healing =  st.radio("delayed_healing",["No","Yes"]) 
        partial_paresis = st.selectbox("partial_paresis",["No","Yes"]) 
        muscle_stiffness =  st.radio("muscle_stiffness",["No","Yes"]) 
        alopecia = st.radio("alopecia",["No","Yes"]) 
        obesity = st.select_slider("obesity",["No","Yes"]) 

    with st.expander("Your selected Options"):
        result = {"age":age,
        "gender":gender,
        "polyuria":polyuria,
        "polydipsia":polydipsia,
        "sudden_weight_loss":sudden_weight_loss,
        "weakness":weakness,
        "polyphagia":polyphagia,
        "genital_thrush":genital_thrush,
        "visual_blurring":visual_blurring,
        "itching":itching,
        "irritability":irritability,
        "delayed_healing":delayed_healing,
        "partial_paresis":partial_paresis,
        "muscle_stiffness":muscle_stiffness,
        "alopecia":alopecia,
        "obesity":obesity}

        st.write(result)

        encoded_result = []
        for i in result.values():
            if type(i) == int:
                encoded_result.append(i)
            elif i in ["Female","Male"]:
                res = get_value(i,gender_map)
                encoded_result.append(res)
            else:
                encoded_result.append(get_fvalue(i))
    
        st.write(encoded_result)

page_names_to_funcs = {
    "Trang Ch√≠nh": main,
    "ƒê·ªçc d·ªØ li·ªáu": contract,
    "M√¥ h√¨nh h√≥a": about,
}
selected_page = st.sidebar.selectbox("L·ª±a ch·ªçn trang", page_names_to_funcs.keys())
page_names_to_funcs[selected_page]()




#def main():
##    st.title("·ª®ng d·ª•ng ph√¢n t√≠ch")
#    menu = ["Trang ch·ªß", "ƒê·ªçc d·ªØ li·ªáu","M√¥ h√¨nh d·ª± ƒëo√°n","About"]
#    choice= st.sidebar.selectbox("L·ª±a ch·ªçn",menu)

#    if choice == "Trang ch·ªß":
#        st.subheader("Trang ch·ªß")
#    elif choice == "ƒê·ªçc d·ªØ li·ªáu":
#         run_eda_app ()
#    elif choice == "M√¥ h√¨nh d·ª± ƒëo√°n":
#        pass
#    else:
#        st.subheader("About") 


#if __name__ == "__main__":
#    main()